}
add2(3,5)
}
add2 <- function(x,y){
x+y
}
add2(3.5)
add2(3,4)
above <-function(x,n){
use <- x>n
x[use]
}
x<-1:20
above(x,12)
columnmean<- function(y){
ne<-ncol (y)
means<- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,1])
}
means
}
make.power<-function(n){pow<-function(x){x^n}pow}
cube <- make.power(3)
lexical scoping.R
pow
}
cube <-make.power(3)
cube <-make.power(3)
x^3
}
{
x^3
}
cube(3)
cube(3)
}
z<-10
f(3)
f(3)
z<-10
f(3)
z<-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10 f(3)
z<-10
f(3)
library(datasets)
data(iris)
?iris
librar(datasets)
library(datasets)
data(mtcars)
?mtcars
inv<- NULL
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
#store cache of inverse matrix
inv<- NULL
#1. set value of the matrix
set<-function(y){
x<<-y
invCache<<-NULL
}
#2.get value for matrix
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), then the cachesolve
##should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("just a sec, retreiving cached data.")
return(inv)
}
data <- x$get()
## Put comments here that give an overall description of what your
## functions do
clear
setwd("~/Desktop/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[, 11] <- as.numeric(outcome[, 11])
}
source("best.R")
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "heart attack")
best("MD", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
sibmit()
submit()
submit()
submit()
submit
submit()
submit()
